
Importing Packages

# Importing the required libraries...

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import xgboost as xg
Importing Dataset

# Loading the data into dataframe...

dataset= pd.read_csv('WineQT.csv')
dataset=dataset.drop(columns=["Id"])
Data Exploration:

# Check the shape of the Dataset...

dataset.shape
(1143, 12)
# Looking the data...

dataset
fixed acidity	volatile acidity	citric acid	residual sugar	chlorides	free sulfur dioxide	total sulfur dioxide	density	pH	sulphates	alcohol	quality
0	7.4	0.700	0.00	1.9	0.076	11.0	34.0	0.99780	3.51	0.56	9.4	5
1	7.8	0.880	0.00	2.6	0.098	25.0	67.0	0.99680	3.20	0.68	9.8	5
2	7.8	0.760	0.04	2.3	0.092	15.0	54.0	0.99700	3.26	0.65	9.8	5
3	11.2	0.280	0.56	1.9	0.075	17.0	60.0	0.99800	3.16	0.58	9.8	6
4	7.4	0.700	0.00	1.9	0.076	11.0	34.0	0.99780	3.51	0.56	9.4	5
...	...	...	...	...	...	...	...	...	...	...	...	...
1138	6.3	0.510	0.13	2.3	0.076	29.0	40.0	0.99574	3.42	0.75	11.0	6
1139	6.8	0.620	0.08	1.9	0.068	28.0	38.0	0.99651	3.42	0.82	9.5	6
1140	6.2	0.600	0.08	2.0	0.090	32.0	44.0	0.99490	3.45	0.58	10.5	5
1141	5.9	0.550	0.10	2.2	0.062	39.0	51.0	0.99512	3.52	0.76	11.2	6
1142	5.9	0.645	0.12	2.0	0.075	32.0	44.0	0.99547	3.57	0.71	10.2	5
1143 rows Ã— 12 columns

# Display concise summary of DataFrame using info()...

dataset.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1143 entries, 0 to 1142
Data columns (total 12 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   fixed acidity         1143 non-null   float64
 1   volatile acidity      1143 non-null   float64
 2   citric acid           1143 non-null   float64
 3   residual sugar        1143 non-null   float64
 4   chlorides             1143 non-null   float64
 5   free sulfur dioxide   1143 non-null   float64
 6   total sulfur dioxide  1143 non-null   float64
 7   density               1143 non-null   float64
 8   pH                    1143 non-null   float64
 9   sulphates             1143 non-null   float64
 10  alcohol               1143 non-null   float64
 11  quality               1143 non-null   int64  
dtypes: float64(11), int64(1)
memory usage: 107.3 KB
# Display the descriptive statistics using describe()...

dataset.describe()
fixed acidity	volatile acidity	citric acid	residual sugar	chlorides	free sulfur dioxide	total sulfur dioxide	density	pH	sulphates	alcohol	quality
count	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000	1143.000000
mean	8.311111	0.531339	0.268364	2.532152	0.086933	15.615486	45.914698	0.996730	3.311015	0.657708	10.442111	5.657043
std	1.747595	0.179633	0.196686	1.355917	0.047267	10.250486	32.782130	0.001925	0.156664	0.170399	1.082196	0.805824
min	4.600000	0.120000	0.000000	0.900000	0.012000	1.000000	6.000000	0.990070	2.740000	0.330000	8.400000	3.000000
25%	7.100000	0.392500	0.090000	1.900000	0.070000	7.000000	21.000000	0.995570	3.205000	0.550000	9.500000	5.000000
50%	7.900000	0.520000	0.250000	2.200000	0.079000	13.000000	37.000000	0.996680	3.310000	0.620000	10.200000	6.000000
75%	9.100000	0.640000	0.420000	2.600000	0.090000	21.000000	61.000000	0.997845	3.400000	0.730000	11.100000	6.000000
max	15.900000	1.580000	1.000000	15.500000	0.611000	68.000000	289.000000	1.003690	4.010000	2.000000	14.900000	8.000000
# List of feature columns and target column...

features = ["fixed acidity","volatile acidity","citric acid","chlorides","total sulfur dioxide","density","sulphates","alcohol","residual sugar","free sulfur dioxide","pH"]  
quality_potential = 'quality' 

# Iterate over each feature and create a scatter plot to visualize the relationship with the target variable 'quality'...

for feature in features:
    plt.figure(figsize=(3, 3)) 
    plt.scatter(dataset[feature], dataset[quality_potential], alpha=0.5)
    plt.title(f'{feature} vs quality_potential')
    plt.xlabel(feature)
    plt.ylabel('quality_potential')
    plt.grid(True)
    plt.show()











#Calculate the correlation matrix for the dataset and create a heatmap to visualize the correlation matrix...

corr_mat = dataset.corr()
plt.figure(figsize=(20, 20))
sns.heatmap(corr_mat, annot=True, cmap='viridis', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Function to display boxplots for each column in the dataset...

def display_boxplots(dataset):
    for column in dataset.columns:
        plt.figure()
        plt.boxplot(dataset[column])
        plt.title(f'Boxplot of {column}')
        plt.show()

# Function to drop outliers using the Interquartile Range (IQR) method...

def drop_outliers_iqr(dataset, threshold=1):
    filtered_df = pd.DataFrame()
    for column in dataset.columns:
        Q1 = dataset[column].quantile(0.25)
        Q3 = dataset[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - threshold * IQR
        upper_bound = Q3 + threshold * IQR
        filtered_df[column] = dataset[(dataset[column] >= lower_bound) & (dataset[column] <= upper_bound)][column]
    return filtered_df

# Example usage:
# Assuming you have a dataframe called 'df'
filtered_df = drop_outliers_iqr(dataset)
filtered_df = filtered_df.dropna()
display_boxplots(filtered_df)












# List of features to be plotted against the quality potential...

features = ["fixed acidity","volatile acidity","citric acid","chlorides","total sulfur dioxide","density","sulphates","alcohol","residual sugar","free sulfur dioxide","pH"]  
quality_potential = 'quality'

# Loop through each feature to create scatter plots...

for feature in features:
    plt.figure(figsize=(3, 3)) 
    plt.scatter(filtered_df[feature], filtered_df[quality_potential], alpha=0.5)
    plt.title(f'{feature} vs quality_potential')
    plt.xlabel(feature)
    plt.ylabel('quality_potential')
    plt.grid(True)
    plt.show()











# Separate the features (X) and the target variable (y) from the filtered dataframe...

X = filtered_df.iloc[:, :-1].values
y = filtered_df.iloc[:, -1].values
from sklearn.model_selection import train_test_split

# Split the dataset into training and testing sets...

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)
from sklearn.ensemble import StackingRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import RidgeCV
from sklearn.model_selection import train_test_split
from catboost import CatBoostRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
# Standardize the feature variables in X_train and X_test using StandardScaler to ensure each feature has a mean of 0 and variance of 1...

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score

# Train a CatBoostClassifier with specified hyperparameters on the scaled training data and evaluate its accuracy on the test data...

catboost_classifier = CatBoostClassifier(verbose=False,  depth=5,       learning_rate=0.1,  iterations=1000,     l2_leaf_reg=4,      random_seed=42     )

catboost_classifier.fit(X_train, y_train)

y_catboost = catboost_classifier.predict(X_test)

accuracy_catboost = accuracy_score(y_test, y_catboost)
print("CatBoost Classifier Accuracy:", accuracy_catboost)
CatBoost Classifier Accuracy: 0.8031496062992126
# Train a CatBoostClassifier on the entire dataset and visualize feature importances using a colorful bar plot.
catboost_model = CatBoostClassifier(verbose=False)
catboost_model.fit(X, y)

# Get feature importances from the trained model
feature_importance = catboost_model.get_feature_importance()
feature_names = ["Feature_" + str(i) for i in range(len(feature_importance))]  # Naming features sequentially

# Create a DataFrame to store feature names and their corresponding importances, sorted by importance
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plotting the feature importances with a colorful bar plot
plt.figure(figsize=(10, 8))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df, palette='viridis', hue='Feature', legend=False)
plt.title('Feature Importance')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Using RandomForestClassifier for prediction and evaluating accuracy...

rf_classifier = RandomForestClassifier(n_estimators=200,random_state=42)
rf_classifier.fit(X_train, y_train)

y_rf = rf_classifier.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_rf)
print("RandomForestClassifier Accuracy:", accuracy_rf)
RandomForestClassifier Accuracy: 0.8031496062992126
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import accuracy_score

# Applying ExtraTreesClassifier for prediction and assessing accuracy...

extra_trees_classifier = ExtraTreesClassifier(n_estimators=200,random_state=42)
extra_trees_classifier.fit(X_train, y_train)

y_extra_trees = extra_trees_classifier.predict(X_test)

accuracy_extra_trees = accuracy_score(y_test, y_extra_trees)
print("ExtraTreesClassifier Accuracy:", accuracy_extra_trees)
ExtraTreesClassifier Accuracy: 0.7952755905511811
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression

# Implementing a Stacking Classifier with Random Forest and CatBoost as base classifiers,and Logistic Regression as the meta-classifier, evaluating its accuracy...

base_classifiers = [
    ('random_forest', RandomForestClassifier(n_estimators=200, random_state=42)),
    ('catboost', CatBoostClassifier(verbose=False, depth=5, learning_rate=0.1,iterations=1000, l2_leaf_reg=4, random_seed=42))
]

meta_classifier = LogisticRegression()

stacking_classifier = StackingClassifier(
    estimators=base_classifiers,
    final_estimator=meta_classifier,
    cv=5  
)

stacking_classifier.fit(X_train, y_train)

y_stacking = stacking_classifier.predict(X_test)

accuracy_stacking = accuracy_score(y_test, y_stacking)
print("Stacking Classifier Accuracy:", accuracy_stacking)
Stacking Classifier Accuracy: 0.8267716535433071







code:
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "563bac7a-bc30-4f74-9a34-cfe948da8ac6",
   "metadata": {},
   "source": [
    "# **Oasis Infobyte Internship (Task-6)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3397243b-9940-42ff-8a9e-01669be48816",
   "metadata": {},
   "source": [
    "# **Wine Quality Prediction**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08784a75-77e2-4c0d-95de-46228255b493",
   "metadata": {},
   "source": [
    "## **Author: Vikas Malik**\n",
    "\n",
    "- [LinkedIn](https://www.linkedin.com/in/vikasmalik64)\n",
    "- [GitHub](https://github.com/VikasMalik64)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "702b8d0e-97c5-4597-bc96-aaed0ff35167",
   "metadata": {},
   "source": [
    "## **Objective**\n",
    "The objective of this project is to predict wine quality based on its chemical characteristics, leveraging **Machine Learning** techniques in viticulture. The dataset includes various chemical attributes such as density and acidity, which are used as features for three distinct classifier models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35b348ce-e90e-4d38-9b66-a71e31c3a7ce",
   "metadata": {},
   "source": [
    "**Importing Packages**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b73592ed-7b6f-4b0b-a7b3-f868f5955e8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the required libraries...\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import xgboost as xg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7349ce0-299a-4298-8589-4915dbf9cc5e",
   "metadata": {},
   "source": [
    "**Importing Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "89dbc212-73ba-4537-abaf-972e2db5b001",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the data into dataframe...\n",
    "\n",
    "dataset= pd.read_csv('WineQT.csv')\n",
    "dataset=dataset.drop(columns=[\"Id\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50e213f3-1bd3-4599-bd03-04ee99c11be1",
   "metadata": {},
   "source": [
    "**Data Exploration**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1343e638-6519-4463-ac6f-1371110dbebb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1143, 12)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the shape of the Dataset...\n",
    "\n",
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e417d00f-ee53-4a4b-9a42-3a793d614490",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.880</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.99680</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.760</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.99700</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.280</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.99800</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.510</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.076</td>\n",
       "      <td>29.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.99574</td>\n",
       "      <td>3.42</td>\n",
       "      <td>0.75</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>6.8</td>\n",
       "      <td>0.620</td>\n",
       "      <td>0.08</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.068</td>\n",
       "      <td>28.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0.99651</td>\n",
       "      <td>3.42</td>\n",
       "      <td>0.82</td>\n",
       "      <td>9.5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>6.2</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.08</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.090</td>\n",
       "      <td>32.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.99490</td>\n",
       "      <td>3.45</td>\n",
       "      <td>0.58</td>\n",
       "      <td>10.5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>5.9</td>\n",
       "      <td>0.550</td>\n",
       "      <td>0.10</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.062</td>\n",
       "      <td>39.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.99512</td>\n",
       "      <td>3.52</td>\n",
       "      <td>0.76</td>\n",
       "      <td>11.2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1142</th>\n",
       "      <td>5.9</td>\n",
       "      <td>0.645</td>\n",
       "      <td>0.12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.075</td>\n",
       "      <td>32.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.99547</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.71</td>\n",
       "      <td>10.2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1143 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0               7.4             0.700         0.00             1.9      0.076   \n",
       "1               7.8             0.880         0.00             2.6      0.098   \n",
       "2               7.8             0.760         0.04             2.3      0.092   \n",
       "3              11.2             0.2
